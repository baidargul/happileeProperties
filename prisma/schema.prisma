generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model builder {
  id          String  @id @default(uuid())
  userId      String  @unique
  description String?
  gst         String?
  user        user    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id        String        @id @default(uuid())
  email     String?       @unique
  address   String?
  phone     String?       @unique
  name      String
  password  String
  status    accountStatus @default(UNDEFINED)
  type      accountTypes  @default(UNDEFINED)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
  agent     agent?
  builder   builder?
  buyer     buyer?
  image     image[]
}

model image {
  id             String           @id(map: "images_pkey") @default(uuid())
  userId         String
  url            String
  createdAt DateTime @default(now())
  user           user             @relation(fields: [userId], references: [id], onDelete: Cascade, map: "images_userId_fkey")
  propertyImages propertyImages[]
}

model agent {
  id          String   @id @default(uuid())
  userId      String   @unique
  description String?
  experience  Decimal? @default(0) @db.Decimal
  rera        String   @unique
  user        user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model buyer {
  id          String  @id @default(uuid())
  userId      String  @unique
  description String?
  address     String?
  user        user    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model allotmentType {
  id           String         @id @default(uuid())
  name         String         @unique
  propertyType propertyType[]
}

model allotmentFor {
  id   String @id @default(uuid())
  name String @unique
}

model propertyType {
  id              String        @id @default(uuid())
  name            String
  allotmentTypeId String
  property        property[]
  allotmentType   allotmentType @relation(fields: [allotmentTypeId], references: [id], onDelete: Cascade)
}

model property {
  id             String           @id @default(uuid())
  propertyTypeId String?
  bhkTypeId      String?
  furnishingId   String?
  amenitiesId    String[]
  ownershipTypeId String
  price          Decimal?         @db.Decimal
  area           Decimal?         @db.Decimal
  age Decimal
  createdAt      DateTime         @default(now())
  allotmentForId String
  title          String
  securityDeposite Decimal?
  monthlyMaintenance Decimal?
  availableDate DateTime
  bhkType        bhk?             @relation("bhkType", fields: [bhkTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  finishing      finishing?       @relation(fields: [furnishingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  propertyType   propertyType?    @relation(fields: [propertyTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  propertyImages propertyImages[]
}

model bhk {
  id                                     String     @id @default(uuid())
  name                                   String     @unique
  property_property_bhkTypeIdTobhkTypeId property[] @relation("bhkType")
}

model finishing {
  id       String     @id @default(uuid())
  name     String     @unique
  property property[]
}

model amenities {
  id   String @id @default(uuid())
  name String @unique
}

model propertyImages {
  id         String   @id @default(uuid())
  propertyId String
  imageId    String
  image      image    @relation(fields: [imageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  property   property @relation(fields: [propertyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum accountStatus {
  UNDEFINED
  INCOMPLETE
  PENDING
  ACTIVE
  SUSPENDED
}

enum accountTypes {
  UNDEFINED
  BUYER
  BUILDER
  AGENT
  ADMIN
  SUPERADMIN
}

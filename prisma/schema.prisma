generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model builder {
  id          String  @id @default(uuid())
  userId      String  @unique
  description String?
  gst         String?
  user        user    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id                  String                @id @default(uuid())
  email               String?
  address             String?
  phone               String?
  name                String
  password            String
  status              accountStatus         @default(UNDEFINED)
  type                accountTypes          @default(UNDEFINED)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())
  deleted             Boolean?              @default(false)
  agent               agent?
  builder             builder?
  buyer               buyer?
  favouriteProperties favouriteProperties[]
  image               image[]
  interested          interested[]
  property            property[]
}

model image {
  id             String           @id(map: "images_pkey") @default(uuid())
  userId         String
  url            String
  createdAt      DateTime         @default(now())
  user           user             @relation(fields: [userId], references: [id], onDelete: Cascade, map: "images_userId_fkey")
  propertyImages propertyImages[]
}

model agent {
  id          String   @id @default(uuid())
  userId      String   @unique
  description String?
  experience  Decimal? @default(0) @db.Decimal
  rera        String   @unique
  user        user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model buyer {
  id          String  @id @default(uuid())
  userId      String  @unique
  description String?
  address     String?
  user        user    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model allotmentType {
  id           String         @id @default(uuid())
  name         String         @unique
  propertyType propertyType[]
}

model allotmentFor {
  id       String     @id @default(uuid())
  name     String     @unique
  property property[]
}

model propertyType {
  id              String        @id @default(uuid())
  name            String        @unique
  allotmentTypeId String
  property        property[]
  allotmentType   allotmentType @relation(fields: [allotmentTypeId], references: [id], onDelete: Cascade)
}

model property {
  id                  String                @id @default(uuid())
  propertyTypeId      String?
  bhkTypeId           String?
  furnishingId        String?
  price               Decimal?              @db.Decimal
  area                Decimal?              @db.Decimal
  createdAt           DateTime              @default(now())
  allotmentForId      String
  title               String
  age                 Decimal
  availableDate       DateTime
  monthlyMaintenance  Decimal?
  ownershipTypeId     String
  securityDeposite    Decimal?
  rent                Decimal?              @db.Decimal
  maintenance         Decimal?              @db.Decimal
  views               Decimal?              @default(0) @db.Decimal
  userId              String?
  amenitiesregister   amenitiesregister[]
  favouriteProperties favouriteProperties[]
  interested          interested[]
  status              propertyStatus @default(PENDING)
  allotmentFor        allotmentFor          @relation(fields: [allotmentForId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bhkType             bhk?                  @relation("bhkType", fields: [bhkTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  furnishing          furnishing?           @relation(fields: [furnishingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ownershipType       ownershipType         @relation(fields: [ownershipTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  propertyType        propertyType?         @relation(fields: [propertyTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                user?                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  propertyAmenities   propertyAmenities[]
  propertyImages      propertyImages[]
}

model bhk {
  id                                     String     @id @default(uuid())
  name                                   String     @unique
  property_property_bhkTypeIdTobhkTypeId property[] @relation("bhkType")
}

model furnishing {
  id       String     @id @default(uuid())
  name     String     @unique
  property property[]
}

model amenities {
  id                String              @id @default(uuid())
  name              String              @unique
  amenitiesregister amenitiesregister[]
  propertyAmenities propertyAmenities[]
}

model propertyImages {
  id         String   @id @default(uuid())
  propertyId String
  imageId    String
  image      image    @relation(fields: [imageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  property   property @relation(fields: [propertyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model favouriteProperties {
  id         String   @id @default(uuid())
  propertyId String
  userId     String
  added      DateTime @default(now())
  property   property @relation(fields: [propertyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ownershipType {
  id       String     @id @default(uuid())
  name     String     @unique
  property property[]
}

model propertyAmenities {
  id         String    @id
  propertyId String
  amenityId  String
  amenities  amenities @relation(fields: [amenityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  property   property  @relation(fields: [propertyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model amenitiesregister {
  id           String    @id @default(uuid())
  propertyId   String
  amentitiesId String
  amenities    amenities @relation(fields: [amentitiesId], references: [id], onDelete: Cascade)
  property     property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model interested {
  id         String    @id @default(uuid())
  propertyId String
  userId     String
  createdAt  DateTime? @default(now()) @db.Date
  property   property  @relation(fields: [propertyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum accountStatus {
  UNDEFINED
  INCOMPLETE
  PENDING
  ACTIVE
  SUSPENDED
}

enum accountTypes {
  UNDEFINED
  BUYER
  BUILDER
  AGENT
  ADMIN
  SUPERADMIN
}

enum propertyStatus {
  PENDING
  PUBLISHED
  SUSPENDED
}
